{"version":3,"file":"valtio-BAwQlNIs.js","sources":["../../node_modules/valtio/esm/vanilla.mjs","../../node_modules/valtio/esm/vanilla/utils.mjs"],"sourcesContent":["import { markToTrack, getUntracked } from 'proxy-compare';\n\nconst isObject = (x) => typeof x === \"object\" && x !== null;\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = (promise) => {\n  switch (promise.status) {\n    case \"fulfilled\":\n      return promise.value;\n    case \"rejected\":\n      throw promise.reason;\n    default:\n      throw promise;\n  }\n}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise) => {\n  const cache = snapCache.get(target);\n  if ((cache == null ? void 0 : cache[0]) === version) {\n    return cache[1];\n  }\n  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n  markToTrack(snap, true);\n  snapCache.set(target, [version, snap]);\n  Reflect.ownKeys(target).forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(snap, key)) {\n      return;\n    }\n    const value = Reflect.get(target, key);\n    const desc = {\n      value,\n      enumerable: true,\n      // This is intentional to avoid copying with proxy-compare.\n      // It's still non-writable, so it avoids assigning a value.\n      configurable: true\n    };\n    if (refSet.has(value)) {\n      markToTrack(value, false);\n    } else if (value instanceof Promise) {\n      delete desc.value;\n      desc.get = () => handlePromise(value);\n    } else if (proxyStateMap.has(value)) {\n      const [target2, ensureVersion] = proxyStateMap.get(\n        value\n      );\n      desc.value = createSnapshot(\n        target2,\n        ensureVersion(),\n        handlePromise\n      );\n    }\n    Object.defineProperty(snap, key, desc);\n  });\n  return Object.preventExtensions(snap);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {\n  if (!isObject(initialObject)) {\n    throw new Error(\"object required\");\n  }\n  const found = proxyCache.get(initialObject);\n  if (found) {\n    return found;\n  }\n  let version = versionHolder[0];\n  const listeners = /* @__PURE__ */ new Set();\n  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {\n    if (version !== nextVersion) {\n      version = nextVersion;\n      listeners.forEach((listener) => listener(op, nextVersion));\n    }\n  };\n  let checkVersion = versionHolder[1];\n  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {\n    if (checkVersion !== nextCheckVersion && !listeners.size) {\n      checkVersion = nextCheckVersion;\n      propProxyStates.forEach(([propProxyState]) => {\n        const propVersion = propProxyState[1](nextCheckVersion);\n        if (propVersion > version) {\n          version = propVersion;\n        }\n      });\n    }\n    return version;\n  };\n  const createPropListener = (prop) => (op, nextVersion) => {\n    const newOp = [...op];\n    newOp[1] = [prop, ...newOp[1]];\n    notifyUpdate(newOp, nextVersion);\n  };\n  const propProxyStates = /* @__PURE__ */ new Map();\n  const addPropListener = (prop, propProxyState) => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && propProxyStates.has(prop)) {\n      throw new Error(\"prop listener already exists\");\n    }\n    if (listeners.size) {\n      const remove = propProxyState[3](createPropListener(prop));\n      propProxyStates.set(prop, [propProxyState, remove]);\n    } else {\n      propProxyStates.set(prop, [propProxyState]);\n    }\n  };\n  const removePropListener = (prop) => {\n    var _a;\n    const entry = propProxyStates.get(prop);\n    if (entry) {\n      propProxyStates.delete(prop);\n      (_a = entry[1]) == null ? void 0 : _a.call(entry);\n    }\n  };\n  const addListener = (listener) => {\n    listeners.add(listener);\n    if (listeners.size === 1) {\n      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {\n        if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && prevRemove) {\n          throw new Error(\"remove already exists\");\n        }\n        const remove = propProxyState[3](createPropListener(prop));\n        propProxyStates.set(prop, [propProxyState, remove]);\n      });\n    }\n    const removeListener = () => {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        propProxyStates.forEach(([propProxyState, remove], prop) => {\n          if (remove) {\n            remove();\n            propProxyStates.set(prop, [propProxyState]);\n          }\n        });\n      }\n    };\n    return removeListener;\n  };\n  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n  const handler = {\n    deleteProperty(target, prop) {\n      const prevValue = Reflect.get(target, prop);\n      removePropListener(prop);\n      const deleted = Reflect.deleteProperty(target, prop);\n      if (deleted) {\n        notifyUpdate([\"delete\", [prop], prevValue]);\n      }\n      return deleted;\n    },\n    set(target, prop, value, receiver) {\n      const hasPrevValue = Reflect.has(target, prop);\n      const prevValue = Reflect.get(target, prop, receiver);\n      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n        return true;\n      }\n      removePropListener(prop);\n      if (isObject(value)) {\n        value = getUntracked(value) || value;\n      }\n      let nextValue = value;\n      if (value instanceof Promise) {\n        value.then((v) => {\n          value.status = \"fulfilled\";\n          value.value = v;\n          notifyUpdate([\"resolve\", [prop], v]);\n        }).catch((e) => {\n          value.status = \"rejected\";\n          value.reason = e;\n          notifyUpdate([\"reject\", [prop], e]);\n        });\n      } else {\n        if (!proxyStateMap.has(value) && canProxy(value)) {\n          nextValue = proxyFunction(value);\n        }\n        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n        if (childProxyState) {\n          addPropListener(prop, childProxyState);\n        }\n      }\n      Reflect.set(target, prop, nextValue, receiver);\n      notifyUpdate([\"set\", [prop], value, prevValue]);\n      return true;\n    }\n  };\n  const proxyObject = newProxy(baseObject, handler);\n  proxyCache.set(initialObject, proxyObject);\n  const proxyState = [\n    baseObject,\n    ensureVersion,\n    createSnapshot,\n    addListener\n  ];\n  proxyStateMap.set(proxyObject, proxyState);\n  Reflect.ownKeys(initialObject).forEach((key) => {\n    const desc = Object.getOwnPropertyDescriptor(\n      initialObject,\n      key\n    );\n    if (\"value\" in desc) {\n      proxyObject[key] = initialObject[key];\n      delete desc.value;\n      delete desc.writable;\n    }\n    Object.defineProperty(baseObject, key, desc);\n  });\n  return proxyObject;\n}) => [\n  // public functions\n  proxyFunction,\n  // shared state\n  proxyStateMap,\n  refSet,\n  // internal things\n  objectIs,\n  newProxy,\n  canProxy,\n  defaultHandlePromise,\n  snapCache,\n  createSnapshot,\n  proxyCache,\n  versionHolder\n];\nconst [defaultProxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n  return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  let promise;\n  const ops = [];\n  const addListener = proxyState[3];\n  let isListenerActive = false;\n  const listener = (op) => {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(() => {\n        promise = void 0;\n        if (isListenerActive) {\n          callback(ops.splice(0));\n        }\n      });\n    }\n  };\n  const removeListener = addListener(listener);\n  isListenerActive = true;\n  return () => {\n    isListenerActive = false;\n    removeListener();\n  };\n}\nfunction snapshot(proxyObject, handlePromise) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  const [target, ensureVersion, createSnapshot] = proxyState;\n  return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\nexport { getVersion, proxy, ref, snapshot, subscribe, unstable_buildProxyFunction };\n","import { subscribe, snapshot, proxy, getVersion, ref, unstable_buildProxyFunction } from 'valtio/vanilla';\n\nfunction subscribeKey(proxyObject, key, callback, notifyInSync) {\n  let prevValue = proxyObject[key];\n  return subscribe(\n    proxyObject,\n    () => {\n      const nextValue = proxyObject[key];\n      if (!Object.is(prevValue, nextValue)) {\n        callback(prevValue = nextValue);\n      }\n    },\n    notifyInSync\n  );\n}\n\nlet currentCleanups;\nfunction watch(callback, options) {\n  let alive = true;\n  const cleanups = /* @__PURE__ */ new Set();\n  const subscriptions = /* @__PURE__ */ new Map();\n  const cleanup = () => {\n    if (alive) {\n      alive = false;\n      cleanups.forEach((clean) => clean());\n      cleanups.clear();\n      subscriptions.forEach((unsubscribe) => unsubscribe());\n      subscriptions.clear();\n    }\n  };\n  const revalidate = () => {\n    if (!alive) {\n      return;\n    }\n    cleanups.forEach((clean) => clean());\n    cleanups.clear();\n    const proxiesToSubscribe = /* @__PURE__ */ new Set();\n    const parent = currentCleanups;\n    currentCleanups = cleanups;\n    try {\n      const cleanupReturn = callback((proxyObject) => {\n        proxiesToSubscribe.add(proxyObject);\n        return proxyObject;\n      });\n      if (cleanupReturn) {\n        cleanups.add(cleanupReturn);\n      }\n    } finally {\n      currentCleanups = parent;\n    }\n    subscriptions.forEach((unsubscribe, proxyObject) => {\n      if (proxiesToSubscribe.has(proxyObject)) {\n        proxiesToSubscribe.delete(proxyObject);\n      } else {\n        subscriptions.delete(proxyObject);\n        unsubscribe();\n      }\n    });\n    proxiesToSubscribe.forEach((proxyObject) => {\n      const unsubscribe = subscribe(proxyObject, revalidate, options == null ? void 0 : options.sync);\n      subscriptions.set(proxyObject, unsubscribe);\n    });\n  };\n  if (currentCleanups) {\n    currentCleanups.add(cleanup);\n  }\n  revalidate();\n  return cleanup;\n}\n\nconst DEVTOOLS = Symbol();\nfunction devtools(proxyObject, options) {\n  if (typeof options === \"string\") {\n    console.warn(\n      \"string name option is deprecated, use { name }. https://github.com/pmndrs/valtio/pull/400\"\n    );\n    options = { name: options };\n  }\n  const { enabled, name = \"\", ...rest } = options || {};\n  let extension;\n  try {\n    extension = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch {\n  }\n  if (!extension) {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && enabled) {\n      console.warn(\"[Warning] Please install/enable Redux devtools extension\");\n    }\n    return;\n  }\n  let isTimeTraveling = false;\n  const devtools2 = extension.connect({ name, ...rest });\n  const unsub1 = subscribe(proxyObject, (ops) => {\n    const action = ops.filter(([_, path]) => path[0] !== DEVTOOLS).map(([op, path]) => `${op}:${path.map(String).join(\".\")}`).join(\", \");\n    if (!action) {\n      return;\n    }\n    if (isTimeTraveling) {\n      isTimeTraveling = false;\n    } else {\n      const snapWithoutDevtools = Object.assign({}, snapshot(proxyObject));\n      delete snapWithoutDevtools[DEVTOOLS];\n      devtools2.send(\n        {\n          type: action,\n          updatedAt: (/* @__PURE__ */ new Date()).toLocaleString()\n        },\n        snapWithoutDevtools\n      );\n    }\n  });\n  const unsub2 = devtools2.subscribe((message) => {\n    var _a, _b, _c, _d, _e, _f;\n    if (message.type === \"ACTION\" && message.payload) {\n      try {\n        Object.assign(proxyObject, JSON.parse(message.payload));\n      } catch (e) {\n        console.error(\n          \"please dispatch a serializable value that JSON.parse() and proxy() support\\n\",\n          e\n        );\n      }\n    }\n    if (message.type === \"DISPATCH\" && message.state) {\n      if (((_a = message.payload) == null ? void 0 : _a.type) === \"JUMP_TO_ACTION\" || ((_b = message.payload) == null ? void 0 : _b.type) === \"JUMP_TO_STATE\") {\n        isTimeTraveling = true;\n        const state = JSON.parse(message.state);\n        Object.assign(proxyObject, state);\n      }\n      proxyObject[DEVTOOLS] = message;\n    } else if (message.type === \"DISPATCH\" && ((_c = message.payload) == null ? void 0 : _c.type) === \"COMMIT\") {\n      devtools2.init(snapshot(proxyObject));\n    } else if (message.type === \"DISPATCH\" && ((_d = message.payload) == null ? void 0 : _d.type) === \"IMPORT_STATE\") {\n      const actions = (_e = message.payload.nextLiftedState) == null ? void 0 : _e.actionsById;\n      const computedStates = ((_f = message.payload.nextLiftedState) == null ? void 0 : _f.computedStates) || [];\n      isTimeTraveling = true;\n      computedStates.forEach(({ state }, index) => {\n        const action = actions[index] || \"No action found\";\n        Object.assign(proxyObject, state);\n        if (index === 0) {\n          devtools2.init(snapshot(proxyObject));\n        } else {\n          devtools2.send(action, snapshot(proxyObject));\n        }\n      });\n    }\n  });\n  devtools2.init(snapshot(proxyObject));\n  return () => {\n    unsub1();\n    unsub2 == null ? void 0 : unsub2();\n  };\n}\n\nconst sourceObjectMap = /* @__PURE__ */ new WeakMap();\nconst derivedObjectMap = /* @__PURE__ */ new WeakMap();\nconst markPending = (sourceObject, callback) => {\n  const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n  if (sourceObjectEntry) {\n    sourceObjectEntry[0].forEach((subscription) => {\n      const { d: derivedObject } = subscription;\n      if (sourceObject !== derivedObject) {\n        markPending(derivedObject);\n      }\n    });\n    ++sourceObjectEntry[2];\n    if (callback) {\n      sourceObjectEntry[3].add(callback);\n    }\n  }\n};\nconst checkPending = (sourceObject, callback) => {\n  const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n  if (sourceObjectEntry == null ? void 0 : sourceObjectEntry[2]) {\n    sourceObjectEntry[3].add(callback);\n    return true;\n  }\n  return false;\n};\nconst unmarkPending = (sourceObject) => {\n  const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n  if (sourceObjectEntry) {\n    --sourceObjectEntry[2];\n    if (!sourceObjectEntry[2]) {\n      sourceObjectEntry[3].forEach((callback) => callback());\n      sourceObjectEntry[3].clear();\n    }\n    sourceObjectEntry[0].forEach((subscription) => {\n      const { d: derivedObject } = subscription;\n      if (sourceObject !== derivedObject) {\n        unmarkPending(derivedObject);\n      }\n    });\n  }\n};\nconst addSubscription = (subscription) => {\n  const { s: sourceObject, d: derivedObject } = subscription;\n  let derivedObjectEntry = derivedObjectMap.get(derivedObject);\n  if (!derivedObjectEntry) {\n    derivedObjectEntry = [/* @__PURE__ */ new Set()];\n    derivedObjectMap.set(subscription.d, derivedObjectEntry);\n  }\n  derivedObjectEntry[0].add(subscription);\n  let sourceObjectEntry = sourceObjectMap.get(sourceObject);\n  if (!sourceObjectEntry) {\n    const subscriptions = /* @__PURE__ */ new Set();\n    const unsubscribe = subscribe(\n      sourceObject,\n      (ops) => {\n        subscriptions.forEach((subscription2) => {\n          const {\n            d: derivedObject2,\n            c: callback,\n            n: notifyInSync,\n            i: ignoreKeys\n          } = subscription2;\n          if (sourceObject === derivedObject2 && ops.every(\n            (op) => op[1].length === 1 && ignoreKeys.includes(op[1][0])\n          )) {\n            return;\n          }\n          if (subscription2.p) {\n            return;\n          }\n          markPending(sourceObject, callback);\n          if (notifyInSync) {\n            unmarkPending(sourceObject);\n          } else {\n            subscription2.p = Promise.resolve().then(() => {\n              delete subscription2.p;\n              unmarkPending(sourceObject);\n            });\n          }\n        });\n      },\n      true\n    );\n    sourceObjectEntry = [subscriptions, unsubscribe, 0, /* @__PURE__ */ new Set()];\n    sourceObjectMap.set(sourceObject, sourceObjectEntry);\n  }\n  sourceObjectEntry[0].add(subscription);\n};\nconst removeSubscription = (subscription) => {\n  const { s: sourceObject, d: derivedObject } = subscription;\n  const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n  derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].delete(subscription);\n  if ((derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].size) === 0) {\n    derivedObjectMap.delete(derivedObject);\n  }\n  const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n  if (sourceObjectEntry) {\n    const [subscriptions, unsubscribe] = sourceObjectEntry;\n    subscriptions.delete(subscription);\n    if (!subscriptions.size) {\n      unsubscribe();\n      sourceObjectMap.delete(sourceObject);\n    }\n  }\n};\nconst listSubscriptions = (derivedObject) => {\n  const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n  if (derivedObjectEntry) {\n    return Array.from(derivedObjectEntry[0]);\n  }\n  return [];\n};\nconst unstable_deriveSubscriptions = {\n  add: addSubscription,\n  remove: removeSubscription,\n  list: listSubscriptions\n};\nfunction derive(derivedFns, options) {\n  const proxyObject = (options == null ? void 0 : options.proxy) || proxy({});\n  const notifyInSync = !!(options == null ? void 0 : options.sync);\n  const derivedKeys = Object.keys(derivedFns);\n  derivedKeys.forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(proxyObject, key)) {\n      throw new Error(\"object property already defined\");\n    }\n    const fn = derivedFns[key];\n    let lastDependencies = null;\n    const evaluate = () => {\n      if (lastDependencies) {\n        if (Array.from(lastDependencies).map(([p]) => checkPending(p, evaluate)).some((isPending) => isPending)) {\n          return;\n        }\n        if (Array.from(lastDependencies).every(\n          ([p, entry]) => getVersion(p) === entry.v\n        )) {\n          return;\n        }\n      }\n      const dependencies = /* @__PURE__ */ new Map();\n      const get = (p) => {\n        dependencies.set(p, { v: getVersion(p) });\n        return p;\n      };\n      const value = fn(get);\n      const subscribeToDependencies = () => {\n        dependencies.forEach((entry, p) => {\n          var _a;\n          const lastSubscription = (_a = lastDependencies == null ? void 0 : lastDependencies.get(p)) == null ? void 0 : _a.s;\n          if (lastSubscription) {\n            entry.s = lastSubscription;\n          } else {\n            const subscription = {\n              s: p,\n              // sourceObject\n              d: proxyObject,\n              // derivedObject\n              k: key,\n              // derived key\n              c: evaluate,\n              // callback\n              n: notifyInSync,\n              i: derivedKeys\n              // ignoringKeys\n            };\n            addSubscription(subscription);\n            entry.s = subscription;\n          }\n        });\n        lastDependencies == null ? void 0 : lastDependencies.forEach((entry, p) => {\n          if (!dependencies.has(p) && entry.s) {\n            removeSubscription(entry.s);\n          }\n        });\n        lastDependencies = dependencies;\n      };\n      if (value instanceof Promise) {\n        value.finally(subscribeToDependencies);\n      } else {\n        subscribeToDependencies();\n      }\n      proxyObject[key] = value;\n    };\n    evaluate();\n  });\n  return proxyObject;\n}\nfunction underive(proxyObject, options) {\n  const keysToDelete = (options == null ? void 0 : options.delete) ? /* @__PURE__ */ new Set() : null;\n  listSubscriptions(proxyObject).forEach((subscription) => {\n    const { k: key } = subscription;\n    if (!(options == null ? void 0 : options.keys) || options.keys.includes(key)) {\n      removeSubscription(subscription);\n      if (keysToDelete) {\n        keysToDelete.add(key);\n      }\n    }\n  });\n  if (keysToDelete) {\n    keysToDelete.forEach((key) => {\n      delete proxyObject[key];\n    });\n  }\n}\n\nfunction addComputed_DEPRECATED(proxyObject, computedFns_FAKE, targetObject = proxyObject) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"addComputed is deprecated. Please consider using `derive`. Falling back to emulation with derive. https://github.com/pmndrs/valtio/pull/201\"\n    );\n  }\n  const derivedFns = {};\n  Object.keys(computedFns_FAKE).forEach((key) => {\n    derivedFns[key] = (get) => computedFns_FAKE[key](get(proxyObject));\n  });\n  return derive(derivedFns, { proxy: targetObject });\n}\n\nfunction proxyWithComputed_DEPRECATED(initialObject, computedFns) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      'proxyWithComputed is deprecated. Please follow \"Computed Properties\" guide in docs.'\n    );\n  }\n  Object.keys(computedFns).forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(initialObject, key)) {\n      throw new Error(\"object property already defined\");\n    }\n    const computedFn = computedFns[key];\n    const { get, set } = typeof computedFn === \"function\" ? { get: computedFn } : computedFn;\n    const desc = {};\n    desc.get = () => get(snapshot(proxyObject));\n    if (set) {\n      desc.set = (newValue) => set(proxyObject, newValue);\n    }\n    Object.defineProperty(initialObject, key, desc);\n  });\n  const proxyObject = proxy(initialObject);\n  return proxyObject;\n}\n\nconst isObject = (x) => typeof x === \"object\" && x !== null;\nlet refSet;\nconst deepClone = (obj) => {\n  if (!refSet) {\n    refSet = unstable_buildProxyFunction()[2];\n  }\n  if (!isObject(obj) || refSet.has(obj)) {\n    return obj;\n  }\n  const baseObject = Array.isArray(obj) ? [] : Object.create(Object.getPrototypeOf(obj));\n  Reflect.ownKeys(obj).forEach((key) => {\n    baseObject[key] = deepClone(obj[key]);\n  });\n  return baseObject;\n};\nfunction proxyWithHistory(initialValue, skipSubscribe = false) {\n  const proxyObject = proxy({\n    value: initialValue,\n    history: ref({\n      wip: void 0,\n      // to avoid infinite loop\n      snapshots: [],\n      index: -1\n    }),\n    clone: deepClone,\n    canUndo: () => proxyObject.history.index > 0,\n    undo: () => {\n      if (proxyObject.canUndo()) {\n        proxyObject.value = proxyObject.history.wip = proxyObject.clone(\n          proxyObject.history.snapshots[--proxyObject.history.index]\n        );\n      }\n    },\n    canRedo: () => proxyObject.history.index < proxyObject.history.snapshots.length - 1,\n    redo: () => {\n      if (proxyObject.canRedo()) {\n        proxyObject.value = proxyObject.history.wip = proxyObject.clone(\n          proxyObject.history.snapshots[++proxyObject.history.index]\n        );\n      }\n    },\n    saveHistory: () => {\n      proxyObject.history.snapshots.splice(proxyObject.history.index + 1);\n      proxyObject.history.snapshots.push(snapshot(proxyObject).value);\n      ++proxyObject.history.index;\n    },\n    subscribe: () => subscribe(proxyObject, (ops) => {\n      if (ops.every(\n        (op) => op[1][0] === \"value\" && (op[0] !== \"set\" || op[2] !== proxyObject.history.wip)\n      )) {\n        proxyObject.saveHistory();\n      }\n    })\n  });\n  proxyObject.saveHistory();\n  if (!skipSubscribe) {\n    proxyObject.subscribe();\n  }\n  return proxyObject;\n}\n\nfunction proxySet(initialValues) {\n  const set = proxy({\n    data: Array.from(new Set(initialValues)),\n    has(value) {\n      return this.data.indexOf(value) !== -1;\n    },\n    add(value) {\n      let hasProxy = false;\n      if (typeof value === \"object\" && value !== null) {\n        hasProxy = this.data.indexOf(proxy(value)) !== -1;\n      }\n      if (this.data.indexOf(value) === -1 && !hasProxy) {\n        this.data.push(value);\n      }\n      return this;\n    },\n    delete(value) {\n      const index = this.data.indexOf(value);\n      if (index === -1) {\n        return false;\n      }\n      this.data.splice(index, 1);\n      return true;\n    },\n    clear() {\n      this.data.splice(0);\n    },\n    get size() {\n      return this.data.length;\n    },\n    forEach(cb) {\n      this.data.forEach((value) => {\n        cb(value, value, this);\n      });\n    },\n    get [Symbol.toStringTag]() {\n      return \"Set\";\n    },\n    toJSON() {\n      return new Set(this.data);\n    },\n    [Symbol.iterator]() {\n      return this.data[Symbol.iterator]();\n    },\n    values() {\n      return this.data.values();\n    },\n    keys() {\n      return this.data.values();\n    },\n    entries() {\n      return new Set(this.data).entries();\n    }\n  });\n  Object.defineProperties(set, {\n    data: {\n      enumerable: false\n    },\n    size: {\n      enumerable: false\n    },\n    toJSON: {\n      enumerable: false\n    }\n  });\n  Object.seal(set);\n  return set;\n}\n\nfunction proxyMap(entries) {\n  const map = proxy({\n    data: Array.from(entries || []),\n    has(key) {\n      return this.data.some((p) => p[0] === key);\n    },\n    set(key, value) {\n      const record = this.data.find((p) => p[0] === key);\n      if (record) {\n        record[1] = value;\n      } else {\n        this.data.push([key, value]);\n      }\n      return this;\n    },\n    get(key) {\n      var _a;\n      return (_a = this.data.find((p) => p[0] === key)) == null ? void 0 : _a[1];\n    },\n    delete(key) {\n      const index = this.data.findIndex((p) => p[0] === key);\n      if (index === -1) {\n        return false;\n      }\n      this.data.splice(index, 1);\n      return true;\n    },\n    clear() {\n      this.data.splice(0);\n    },\n    get size() {\n      return this.data.length;\n    },\n    toJSON() {\n      return new Map(this.data);\n    },\n    forEach(cb) {\n      this.data.forEach((p) => {\n        cb(p[1], p[0], this);\n      });\n    },\n    keys() {\n      return this.data.map((p) => p[0]).values();\n    },\n    values() {\n      return this.data.map((p) => p[1]).values();\n    },\n    entries() {\n      return new Map(this.data).entries();\n    },\n    get [Symbol.toStringTag]() {\n      return \"Map\";\n    },\n    [Symbol.iterator]() {\n      return this.entries();\n    }\n  });\n  Object.defineProperties(map, {\n    data: {\n      enumerable: false\n    },\n    size: {\n      enumerable: false\n    },\n    toJSON: {\n      enumerable: false\n    }\n  });\n  Object.seal(map);\n  return map;\n}\n\nexport { addComputed_DEPRECATED as addComputed, derive, devtools, proxyMap, proxySet, proxyWithComputed_DEPRECATED as proxyWithComputed, proxyWithHistory, subscribeKey, underive, unstable_deriveSubscriptions, watch };\n"],"names":["isObject","x","proxyStateMap","refSet","buildProxyFunction","objectIs","newProxy","target","handler","canProxy","defaultHandlePromise","promise","snapCache","createSnapshot","version","handlePromise","cache","snap","markToTrack","key","value","desc","target2","ensureVersion","proxyCache","versionHolder","proxyFunction","initialObject","found","listeners","notifyUpdate","op","nextVersion","listener","checkVersion","nextCheckVersion","propProxyStates","propProxyState","propVersion","createPropListener","prop","newOp","addPropListener","define_import_meta_env_default","remove","removePropListener","_a","entry","addListener","prevRemove","baseObject","proxyObject","prevValue","deleted","receiver","hasPrevValue","getUntracked","nextValue","v","e","childProxyState","proxyState","defaultProxyFunction","proxy","subscribe","callback","notifyInSync","ops","isListenerActive","removeListener","snapshot","ref","obj","subscribeKey"],"mappings":"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","x_google_ignoreList":[0,1]}