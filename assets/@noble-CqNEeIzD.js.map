{"version":3,"file":"@noble-CqNEeIzD.js","sources":["../../node_modules/@noble/hashes/esm/_assert.js","../../node_modules/@noble/hashes/esm/crypto.js","../../node_modules/@noble/hashes/esm/utils.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/@noble/hashes/esm/_sha2.js","../../node_modules/@noble/hashes/esm/sha256.js","../../node_modules/@noble/hashes/esm/_u64.js","../../node_modules/@noble/hashes/esm/sha512.js","../../node_modules/@noble/hashes/esm/sha3.js","../../node_modules/@noble/curves/esm/abstract/utils.js","../../node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map"],"names":["number","bytes","b","lengths","hash","exists","instance","checkFinished","output","out","min","crypto","u8a","a","u32","arr","createView","rotr","word","shift","isLE","utf8ToBytes","str","toBytes","data","concatBytes","arrays","r","sum","pad","Hash","wrapConstructor","hashCons","hashC","msg","tmp","randomBytes","bytesLength","HMAC","_key","assertHash","key","blockLen","buf","assertExists","assertBytes","to","oHash","iHash","finished","destroyed","outputLen","hmac","message","setBigUint64","view","byteOffset","value","_32n","_u32_max","wh","wl","h","l","SHA2","padOffset","buffer","len","pos","take","dataView","i","oview","outLen","state","res","length","Chi","c","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","W15","W2","s0","s1","sigma1","T1","T2","sha256","U32_MASK64","fromBig","le","split","lst","Ah","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","bufferOut","gen","keccak_256","hexes","_","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","hexByte","byte","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","e","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","sl","pred","validatorFns","val","object","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","invert","u","q","m","tonelliShanks","P","legendreC","Q","S","Z","p1div4","Fp","n","root","Q1div2","g","t2","ge","FpSqrt","c1","n2","nv","FIELD_FIELDS","validateField","field","initial","opts","map","FpPow","f","p","d","FpInvertBatch","nums","lastMultiplied","acc","inverted","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","redef","BITS","BYTES","sqrtP","lhs","rhs","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","wNAF","bits","constTimeNegate","condition","item","neg","W","windows","windowSize","elm","points","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","precomputesMap","transform","comp","validateBasic","curve","validatePointOpts","ut.validateObject","endo","b2n","h2b","ut","DER","sBytes","rBytesLeft","sig","slice","shl","rhl","rl","weierstrassPoints","CURVE","_c","point","_isCompressed","ut.concatBytes","fromBytes","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","wrapPrivateKey","ut.bytesToHex","ut.bytesToNumberBE","mod.mod","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","is0","toInv","privateKey","left","right","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","wnaf","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","mul","iz","z","ax","ay","zz","cofactor","isTorsionFree","clearCofactor","isCompressed","_bits","validateOpts","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","modN","invN","mod.invert","cat","head","y2","isYOdd","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","from","Signature","recovery","msgHash","rec","bits2int_modN","radj","prefix","ir","u1","u2","ut.hexToBytes","utils","mod.getMinHashLength","mod.mapHashToField","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","ut.createHmacDrbg","verify","signature","publicKey","_a","sg","_sig","derError","error","is","getHash","msgs","createCurve","defHash","create","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","a2","POW_2_128","c2"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}