{"version":3,"file":"@metamask-C75uGz2U.js","sources":["../../node_modules/@metamask/safe-event-emitter/dist/cjs/index.js","../../node_modules/@metamask/utils/dist/assert.js","../../node_modules/@metamask/utils/dist/base64.js","../../node_modules/@metamask/utils/dist/hex.js","../../node_modules/@metamask/utils/dist/bytes.js","../../node_modules/@metamask/utils/dist/checksum.js","../../node_modules/@metamask/utils/dist/coercers.js","../../node_modules/@metamask/utils/dist/collections.js","../../node_modules/@metamask/utils/dist/encryption-types.js","../../node_modules/@metamask/utils/dist/json.js","../../node_modules/@metamask/utils/dist/keyring.js","../../node_modules/@metamask/utils/dist/logging.js","../../node_modules/@metamask/utils/dist/misc.js","../../node_modules/@metamask/utils/dist/number.js","../../node_modules/@metamask/utils/dist/opaque.js","../../node_modules/@metamask/utils/dist/time.js","../../node_modules/@metamask/utils/dist/transaction-types.js","../../node_modules/@metamask/utils/dist/versions.js","../../node_modules/@metamask/utils/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.default = SafeEventEmitter;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"superstruct\");\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    var _a, _b;\n    /* istanbul ignore next */\n    return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string');\n}\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error) {\n    const message = isErrorWithMessage(error) ? error.message : String(error);\n    // If the error ends with a period, remove it, as we'll add our own period.\n    if (message.endsWith('.')) {\n        return message.slice(0, -1);\n    }\n    return message;\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    var _a, _b;\n    const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n    const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst assert_1 = require(\"./assert\");\nconst hex_1 = require(\"./hex\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    var _a;\n    // \"0x\" is often used as empty byte array.\n    if (((_a = value === null || value === void 0 ? void 0 : value.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(value)) === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst base64_1 = require(\"./base64\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nconst bytes_1 = require(\"./bytes\");\nconst hex_1 = require(\"./hex\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.define)('Json', (value, context) => {\n    /**\n     * Helper function that runs the given struct validator and returns the\n     * validation errors, if any. If the value is valid, it returns `true`.\n     *\n     * @param innerValue - The value to validate.\n     * @param struct - The struct to use for validation.\n     * @returns The validation errors, or `true` if the value is valid.\n     */\n    function checkStruct(innerValue, struct) {\n        const iterator = struct.validator(innerValue, context);\n        const errors = [...iterator];\n        if (errors.length > 0) {\n            return errors;\n        }\n        return true;\n    }\n    try {\n        // The plain value must be a valid JSON value, but it may be altered in the\n        // process of JSON serialization, so we need to validate it again after\n        // serialization. This has the added benefit that the returned error messages\n        // will be more helpful, as they will point to the exact location of the\n        // invalid value.\n        //\n        // This seems overcomplicated, but without checking the plain value first,\n        // there are some cases where the validation passes, even though the value is\n        // not valid JSON. For example, `undefined` is not valid JSON, but serializing\n        // it will remove it from the object, so the validation will pass.\n        const unsafeResult = checkStruct(value, exports.UnsafeJsonStruct);\n        if (unsafeResult !== true) {\n            return unsafeResult;\n        }\n        // JavaScript engines are highly optimized for this specific use case of\n        // JSON parsing and stringifying, so there should be no performance impact.\n        return checkStruct(JSON.parse(JSON.stringify(value)), exports.UnsafeJsonStruct);\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return 'Circular reference detected';\n        }\n        return false;\n    }\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    return (0, superstruct_1.is)(value, exports.JsonStruct);\n}\nexports.isValidJson = isValidJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, superstruct_1.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: (0, superstruct_1.optional)(exports.JsonStruct),\n    stack: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]));\nexports.JsonRpcRequestStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exports.JsonRpcParamsStruct,\n});\nexports.JsonRpcNotificationStruct = (0, superstruct_1.omit)(exports.JsonRpcRequestStruct, ['id']);\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = Object.assign({ permitEmptyString: true, permitFractions: false, permitNull: true }, options);\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.js.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    var _a;\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + ((_a = value.match(exports.ESCAPE_CHARACTERS_REGEXP)) !== null && _a !== void 0 ? _a : []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert\");\nconst hex_1 = require(\"./hex\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst semver_1 = require(\"semver\");\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert\"), exports);\n__exportStar(require(\"./base64\"), exports);\n__exportStar(require(\"./bytes\"), exports);\n__exportStar(require(\"./checksum\"), exports);\n__exportStar(require(\"./coercers\"), exports);\n__exportStar(require(\"./collections\"), exports);\n__exportStar(require(\"./encryption-types\"), exports);\n__exportStar(require(\"./hex\"), exports);\n__exportStar(require(\"./json\"), exports);\n__exportStar(require(\"./keyring\"), exports);\n__exportStar(require(\"./logging\"), exports);\n__exportStar(require(\"./misc\"), exports);\n__exportStar(require(\"./number\"), exports);\n__exportStar(require(\"./opaque\"), exports);\n__exportStar(require(\"./time\"), exports);\n__exportStar(require(\"./transaction-types\"), exports);\n__exportStar(require(\"./versions\"), exports);\n//# sourceMappingURL=index.js.map"],"names":["cjs","events_1","require$$0","safeApply","handler","context","args","err","arrayClone","arr","n","copy","i","SafeEventEmitter","type","doError","events","er","len","listeners","assert_1","superstruct_1","isErrorWithMessage","error","isConstructable","fn","_a","_b","getErrorMessage","message","getError","ErrorWrapper","AssertionError","options","assert","value","assertStruct","struct","errorPrefix","assertExhaustive","_object","base64_1","require$$1","base64","paddingRequired","characterSet","letters","re","exports","isHexString","isStrictHexString","assertIsHexString","assertIsStrictHexString","add0x","hexadecimal","remove0x","bytes","hex_1","HEX_MINIMUM_NUMBER_CHARACTER","HEX_MAXIMUM_NUMBER_CHARACTER","HEX_CHARACTER_OFFSET","getPrecomputedHexValuesBuilder","lookupTable","getPrecomputedHexValues","isBytes","assertIsBytes","bytesToHex","bytesToBigInt","bytesToSignedBigInt","byte","bytesToNumber","bigint","bytesToString","hexToBytes","strippedValue","normalizedValue","c1","c2","n1","n2","bigIntToBytes","bigIntFits","mask","signedBigIntToBytes","byteLength","numberValue","numberToBytes","stringToBytes","valueToBytes","concatBytes","values","normalizedValues","offset","createDataView","buffer","checksum","coercers","bytes_1","require$$2","require$$3","NumberLikeStruct","NumberCoercer","BigIntCoercer","BytesCoercer","HexCoercer","createNumber","result","createBigInt","createBytes","createHex","__classPrivateFieldSet","this","receiver","state","kind","f","__classPrivateFieldGet","_FrozenMap_map","_FrozenSet_set","collections","FrozenMap","entries","callbackfn","thisArg","key","_map","FrozenSet","value2","_set","member","encryptionTypes","finiteNumber","checkStruct","innerValue","errors","unsafeResult","isValidJson","getJsonSize","json","isJsonRpcNotification","assertIsJsonRpcNotification","isJsonRpcRequest","assertIsJsonRpcRequest","isPendingJsonRpcResponse","response","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","permitEmptyString","permitFractions","permitNull","id","keyring","__importDefault","mod","logging","debug_1","globalLogger","createProjectLogger","projectName","createModuleLogger","projectLogger","moduleName","isNonEmptyArray","isNullOrUndefined","isObject","hasProperty","objectToCheck","name","JsonSize","isPlainObject","proto","isASCII","character","calculateStringSize","total","calculateNumberSize","number","numberToHex","bigIntToHex","hexToNumber","hexToBigInt","opaque","Duration","isNonNegativeInteger","assertIsNonNegativeInteger","inMilliseconds","count","duration","timeSince","timestamp","transactionTypes","semver_1","isValidSemVerVersion","version","isValidSemVerRange","versionRange","assertIsSemVerVersion","assertIsSemVerRange","range","gtVersion","version1","version2","gtRange","satisfiesVersionRange","__createBinding","o","m","k","k2","desc","__exportStar","p","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}