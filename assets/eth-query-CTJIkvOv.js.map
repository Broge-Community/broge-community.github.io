{"version":3,"file":"eth-query-CTJIkvOv.js","sources":["../../node_modules/eth-query/index.js"],"sourcesContent":["const extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n"],"names":["extend","require$$0","createRandomId","require$$1","ethQuery","EthQuery","provider","self","generateFnWithDefaultBlockFor","generateFnFor","opts","cb","createPayload","err","response","methodName","args","argCount","data"],"mappings":"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","x_google_ignoreList":[0]}